// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: workflow.sql

package sqlc

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createWorkflow = `-- name: CreateWorkflow :one
INSERT INTO workflows (
  current_node,
  status,
  graph
) VALUES (
  $1, $2, $3
)
RETURNING id, current_node, status, graph, created_at
`

type CreateWorkflowParams struct {
	CurrentNode string          `json:"current_node"`
	Status      string          `json:"status"`
	Graph       json.RawMessage `json:"graph"`
}

func (q *Queries) CreateWorkflow(ctx context.Context, arg CreateWorkflowParams) (Workflow, error) {
	row := q.db.QueryRowContext(ctx, createWorkflow, arg.CurrentNode, arg.Status, arg.Graph)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.CurrentNode,
		&i.Status,
		&i.Graph,
		&i.CreatedAt,
	)
	return i, err
}

const getWorflow = `-- name: GetWorflow :one
SELECT id, current_node, status, graph, created_at FROM workflows
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWorflow(ctx context.Context, id uuid.UUID) (Workflow, error) {
	row := q.db.QueryRowContext(ctx, getWorflow, id)
	var i Workflow
	err := row.Scan(
		&i.ID,
		&i.CurrentNode,
		&i.Status,
		&i.Graph,
		&i.CreatedAt,
	)
	return i, err
}
